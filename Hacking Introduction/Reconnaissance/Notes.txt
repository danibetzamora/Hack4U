NMAP

	* NMAP por defecto escanea mediante el protocolo TCP *

	route -n -> Da información de la red (router, network ID, netmask...)

	nmap 192.168.1.1 -> Escanea los puertos más comunes de la dirección IP indicada

	nmap -p22 192.168.1.1 -> Escanea el puerto 22 de la dirección IP

	nmap -p1-100 192.168.1.1 -> Escanea en el rango de los 100 primeros puertos

	nmap -p- 192.168.1.1 -> Escanea el rango de puertos entero

	nmap --top-ports 500 192.168.1.1 -> Escanea los 500 puertos más comunes
	
		Tipos de puerto -> Abierto, Cerrado, Filtrado (No se sabe si está abierto o filtrado)

	nmap --top-ports 500 --open 192.168.1.1 -> Reporta únicamente los puertos que están abiertos

	nmap -p- --open 192.168.1.1 -> Escaneo de todos los puertos que están abiertos (va algo más rápido)

	nmap -p- --open 192.168.1.1 -v -> Con el -v se le indica que sea "verbose", es decir, que vaya dando información 

	nmap -p- --open 192.168.1.1 -v -n -> Con el -n le indicamos que no haga resolución DNS para agilizar el escaneo
	
	nmap -p- --open -T5 192.168.1.1 -v -n -> T5 (modo insane) hace que el escaneo sea mucho más rápido pero menos fiable

		El parámetro -T hace uso de 6 plantillas distintas de escaneo (desde la 0 a la 5)

		Cada plantilla hace escaneos distintos en cuanto a velocidad, rendimiento, eficacia, sigilo...

	nmap -p- -T5 --open 192.168.1.1 -v -n -Pn -> Con Pn se da por hecho que el host esta activo (no se aplica resolución ARP)

	nmap -p22 -sT --open 192.168.1.1 -v -n -> Escaneo TCP Connect (Completa la conexión TCP)(Existen más tipos de escaneos)

	nmap -p- --open -sS --min-rate 5000 -v -n -Pn 192.168.1.1 -> Escaneo SYN (No termina la conexión, manda un SYN, recibe un SYN/ACK, y manda un RST)

		Es más sigiloso y no deja rastro (al no terminar la conexión, los firewalls no almacenan logs)

		--min-rate es para indicarle que debe tramitar a una velocidad no más lenta que 5000 paquetes por segundo

	nmap -sn 192.168.1.0/24 -> Para analizar los activos existentes en la red

	nmap -sn 192.168.1.0/24 | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' -> Expresión regular solo para obtener las IP

	nmap -O 192.168.1.64 -> Da información sobre el sistema operativo y las versiones del host

	nmap -p22,80 -sV 192.168.1.1 -> sV da información sobre la versión y el servicio que corre en los puertos del host


NMAP - EVASIÓN DE FIREWALLS

	nmap -p22 192.168.1.1 -f -> Fragmenta los paquetes enviados

	nmap -p22 192.168.1.1 -D 192.168.1.215 -> Spoofea un dirección IP para que también envíe paquetes (hay direcciones IP bloqueadas por los firewalls)

	nmap -p22 --open --source-port 53 -T5 -v -n 192.168.1.1 -> Se le indica el puerto de origen (los firewalls conocen los puertos usados por nmap)

	nmap -p22 192.168.1.1 --data-length 21 -> Cambiar el tamaño del paquete enviado (los firewalls saben los tamaños usados por nmap)

		El tamaño base usado por nmap es 58 para los paquetes SYN, al indicar 21, el tamaño del paquete enviado será de 79 (58 + 21)

	nmap -p22 192.168.1.1 --spoof-mac 00:11:22:33:44:55 -Pn -> Falsifica la MAC


NMAP - SCRIPTS

	locate .nse -> Localización de todos los scripts usados por nmap y escritos en lua

	nmap -p22 192.168.1.1 -sCV -> Escanea el servicio y la versión del puerto, además de lanzar una serie de scripts de nmap para obtener información

		De esta manera se están lanzando un conjunto de scripts comunes, de entre los más de 600 scripts disponibles en nmap

		http-robots -> Script de detección de directorios de una web
	
	* Existen varias categorías en los scripts de nmap *
		
		locate .nse | xargs grep "categories" -> Manera de ver las categorías de cada uno de los scripts (xargs ejecuta instrucciones en paralelo)

		locate .nse | xargs grep "categories" | grep -oP '".*?"' | sort -u -> Visualización de todas las categorías disponibles (hay 14 distintas)

	nmap -p22 192.168.1.1 --script="vuln and safe" -> Lanzamiento de scripts que presenten la categoría de "vuln" y la de "safe"

	*** Prueba de scripts en servidor local ***

		python3 -m http.server 80 -> Forma de montar rápidamente un servicio http

		lsof -i:80 -> Indica el servicio que está corriendo por un puerto

		pwdx 16265 -> Forma de ver en que directorio se está ejecutando un proceso (se indica el PID)

		nmap -p80 192.168.1.64 --script http-enum -> Script de enumeración de directorios en una web (fuzzing)
		
		tcpdump -i lo -w captura.cap -v -> Interceptamos todo el tráfico en loopback (son solicitudes a nuestro propio servidor)

		tshark -r captura.cap 2>/dev/null -> Como wireshark pero en terminal

		tshark -r captura.cap -Y "http" 2>/dev/null -> Se filtra por protocolo (peticiones http)


MASSCAN

	masscan -p21,22,445,8080,80,443 -Pn 192.168.0.0/16 --rate=10000 -> Herramienta de escaneo parecida a nmap


ANÁLISIS DE RED

	iwconfig -> Muestra las interfaces de red disponibles

	tcpdump -i ens33 -w captura.cap -v -> Herramienta usada para capturar los paquetes enviados y recibidos en la red

		Con -i se le indica la interfaz de red que va a ser analizada				  

		Con -w se le indica el fichero en el que se va a escribir la información capturada

	wireshark captura.cap &>/dev/null & disown -> Con wireshark se analiza la captura de paquetes recién realizada

		Con &>/dev/null se le indica que rediriga todas las salidas para que no se muestren por terminal

		Con disown se le indica que sea un proceso a parte (no se cierra si se cierra la terminal)

	* En wireshark * -> tcp.port == 22 -> Filtra por las conexiones por TCP en el puerto 22

	* En wireshark * -> ip.flags.mf == 1 -> Filtro para buscar por paquetes fragmentados (Los no fragmentados serían con un 0)	

	* En wireshark * -> ip.dst == 192.168.1.1 / ip.src == 192.168.1.1 -> Indicar IP de origen o de destino

	arp-scan -I ens33 --localnet -> Manera de sacar equipos conectados a la red


DESCUBRIMIENTO DE CORREOS DE UN DOMINIO

	https://hunter.io/ -> Se introduce un dominio y se obtienen correos

	https://intelx.io/	

	https://phonebook.cz/


RECONOCIMIENTO DE IMÁGENES

	https://pimeyes.com/en


ENUMERACIÓN DE SUBDOMINIOS

	pip3 ctfr.py -d google.com -> Enumera subdominios de forma pasiva (No aplica fuerza bruta ni hace peticiones)

		La utilidad se encuentra clonada en el directorio /opt

	gobuster vhost -u https://youtube.com -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -t 20

		Enumeración activa de subdominios aplicando fuerza bruta

		Con vhost se le indica que se van a enumerar subdominios

		Con -u "url" se indica el target a enumerar

		Con -w se le indica un diccionario con el que aplicar fuerza bruta

		Con -t 20 se le indica que se ejecute en 20 hilos paralelos para agilizar el proceso

	wfuzz -c -t 20 -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -H "Host: FUZZ.google.com" https://google.com

		Enumeración activa de subdominios aplicando fuerza bruta
		
		Con -c se aplican colores al output

		-H "Host: FUZZ.google.com" -> De esta manera se le indica con la palabra "FUZZ" en que parte del dominio se usa el payload

		Con --hc=403 -> Se oculta el código de estado y se muestran todos los demás (Hide Code)

		Con --sc=200 -> Se muestran únicamente subdominios con este código de estado (Show Code)


BRECHAS DE SEGURIDAD Y CREDENCIALES

	https://www.dehashed.com/ -> Web en la que se pueden encontrar credenciales (introduciendo dominios)


IDENTIFICACIÓN DE TECNOLOGÍAS WEB

	whatweb -> Herramienta para identificar las tecnologías presentes detrás de una web (tabién identifica los CMS)

	whatweb https://www.ulpgc.es

	wappalyzer -> add-on de Firefox que da información sobre el sitio web

	https://builtwith.com/ -> Web que de forma más extensa da información sobre las páginas web buscadas

	